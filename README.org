#+PROPERTY: LOGGING nil

#+BEGIN_HTML
<a href=https://alphapapa.github.io/dont-tread-on-emacs/><img src="dont-tread-on-emacs-150.png" align="right"></a>
#+END_HTML

* defrepeater.el

[[https://melpa.org/#/helm-org-rifle][file:https://melpa.org/packages/defrepeater-badge.svg]] [[https://stable.melpa.org/#/helm-org-rifle][file:https://stable.melpa.org/packages/defrepeater-badge.svg]]

This package lets you easily define "repeating commands," which are commands that can be repeated by pressing the last key of the sequence bound to it.

For example, let's say that you use ~winner-mode~, and you have ~C-c C-w p~ bound to =winner-undo=.  Obviously, pressing that whole sequence repeatedly is tiresome when you want to go several steps back.  But using this macro, you can press ~C-c C-w p~ once, and then keep pressing ~p~ to repeat =winner-undo=, until you press a different key (you could press ~C-g~ if you needed to stop the repetition so you could press ~p~ normally).

** Usage

Define repeating versions of commands like this:

#+BEGIN_SRC elisp
  ;; Automatically defines `winner-redo-repeat' command:
  (defrepeater #'winner-redo)

  ;; Optionally specify the name of the repeater, like using `defalias':
  (defrepeater 'winner-undo-repeat #'winner-undo)
#+END_SRC

Then you can bind your keys like this (example using [[https://github.com/noctuid/general.el][general]]):

#+BEGIN_SRC elisp
  (general-def
    [remap winner-redo] #'winner-redo-repeat
    [remap winner-undo] #'winner-undo-repeat)
#+END_SRC

For example, I had ~M-SPC w p~ bound to =winner-undo=, so now I can press ~M-SPC w p p p~ to call =winner-undo= 3 times.

You can also use ~defrepeater~ in a key-binding expression, like:

#+BEGIN_SRC elisp
  (global-set-key (kbd "C-x o") (defrepeater #'other-window))
#+END_SRC

** Installation

*** MELPA

If you installed from MELPA, you're done.

*** Manual

Put =defrepeater.el= in your ~load-path~, and ~(require 'defrepeater)~ in your init file.

** Changelog

*** 1.0

Initial release.

** Credits

This was inspired by [[https://emacs.stackexchange.com/a/13102][this answer]] by Drew Adams.  Thanks also to [[https://github.com/noctuid/general.el][Fox Keister]] for his feedback.

** Development

Bug reports, feature requests, suggestions â€” /oh my/!

** License

GPLv3
